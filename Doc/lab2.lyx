#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage[brazil]{babel}    % dá suporte para os termos na língua portuguesa do Brasil
\usepackage{url}
\usepackage{textcomp}
\usepackage[table]{xcolor}
\usepackage{array}
\usepackage{longtable}
\usepackage{graphicx}
\usepackage{amsmath} 
\usepackage{wrapfig}
\numberwithin{table}{section}
\numberwithin{figure}{section}
\usepackage{color}
\usepackage{listings}


\newcommand*{\titleTMB}{\begingroup \centering \settowidth{\unitlength}{\LARGE MC 613} \vspace*{\baselineskip} {\large\scshape  Grupo 5 - Turma A}\\[\baselineskip] \rule{11.0cm}{1.6pt}\vspace*{-\baselineskip}\vspace*{2pt} \rule{11.0cm}{0.4pt}\\[\baselineskip] {\LARGE Segundo laboratório }\\[0.2\baselineskip] {\LARGE de Circuitos Digitais}\\[0.2\baselineskip] {\itshape MC 613 - Primeiro Semestre de 2010}\\[0.2\baselineskip] \rule{11.0cm}{0.4pt}\vspace*{-\baselineskip}\vspace{3.2pt} \rule{11.0cm}{1.6pt}\\[\baselineskip] {\large\scshape Professor: Guido Araújo}\par \vfill {\normalsize   \scshape 
\begin{center} 	\begin{tabular}{  l  l  p{5cm} } 		Henrique Serapião Gonzales     &  RA: 083636 \\ 		Marcelo Galvão Póvoa & RA: 082115\\ 		Tiago Chedraoui Silva      & RA: 082941\\  	
\end{tabular} \end{center}
\itshape \today }\\[\baselineskip] \vspace{3.2pt} \endgroup}

\usepackage{multicol}
\end_preamble
\use_default_options true
\language brazilian
\inputencoding auto
\font_roman ae
\font_sans lmss
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\rightmargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{titlepage}  
\backslash
titleTMB 
\backslash
end{titlepage} % capa no preambulo document settings
\end_layout

\begin_layout Plain Layout

 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Questão 1
\end_layout

\begin_layout Standard

\lang english
Neste exercício nos foi dado um desenho esquemático de um circuito somador
 completo com 3 entradas (a1, a0 e c0) e 2 saídas (b0 e c1).
 Através do esquema foi possivel montar a tabela verdade do circuito (Tabela
 1.1), as expressoes lógicas de c1 e b0 e montar o VHDL correspondente, que
 é o principal objetivo da questão.
\end_layout

\begin_layout Standard
\align center

\lang english
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="5">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
a1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
a0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
c0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
b0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
c1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size scriptsize
\lang english
Tabela 1.1 - Tabela verdade do somador.
\end_layout

\begin_layout Standard
\paragraph_spacing double

\series bold
\size small
\lang english
Expressões Lógicas:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Formula $b0=c0\cdot(a1\oplus a0)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $c1=(a1\oplus a0)\cdot c0+a1\cdot a0$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "somador.vhdl"

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Implementação VHDL do somador
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Questão 2
\end_layout

\begin_layout Paragraph*
a) 
\end_layout

\begin_layout Standard
Um somador de vários bits pode ser construído a partir de instâncias (componente
s) de somadores totais de 1-bit, criado na questão anterior.
 Uma implementação comum é a de 
\emph on
carry propagado
\emph default
, na qual o 
\emph on
carry
\emph default
 de saída de um somador é ligado no de entrada do próximo somador, como
 na figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Somador-de-carry"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename 500px-4-bit_ripple_carry_adder.svg.png
	width 7cm

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Somador de 
\emph on
carry propagado
\begin_inset CommandInset label
LatexCommand label
name "fig:Somador-de-carry"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Além disso, para realizar também as operações de subtração (através do parâmetro
 
\begin_inset Formula $S=0$
\end_inset

), basta usar a identidade 
\begin_inset Formula $A-B=A+(-B)$
\end_inset

 para precisar realizar apenas somas.
 Entretanto, note que é necessário obter o oposto do segundo operando.
 A representação mais usual de números negativos em 
\begin_inset Formula $b$
\end_inset

 bits é a de 
\emph on
complemento de 2
\emph default
, uma vez que ela 
\emph on
(i)
\emph default
 permite somar positivos e negativos indistintamente e 
\emph on
(ii) 
\emph default
cada número (de 
\begin_inset Formula $-2^{b-1}$
\end_inset

 a 
\begin_inset Formula $+2^{b-1}-1$
\end_inset

) tem representação única.
 Para trocar o sinal de um número, basta complementar cada dígito binário
 e somar 1.
 Sejam 
\begin_inset Formula $b_{3}b_{2}b_{1}b_{0}$
\end_inset

 o número a ser convertido e 
\begin_inset Formula $c_{3}c_{2}c_{1}c_{0}$
\end_inset

 a saída.
 As expressões lógicas para tal operação podem ser obtidas por inspeção:
 
\begin_inset Formula $c_{i}$
\end_inset

 vai ser 
\begin_inset Formula $\overline{b_{i}}$
\end_inset

, a não ser que tenha ocorrido um carry na soma final até 
\begin_inset Formula $i$
\end_inset

, isto é, se 
\begin_inset Formula $b_{i-1}=0,\: b_{i-2}=0\ldots$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
c_{0}=b_{0}\qquad c_{1}=\overline{b_{1}}\oplus\overline{b_{0}}\qquad c_{2}=\overline{b_{2}}\oplus(\overline{b_{1}}\cdot\overline{b_{0}})\qquad c_{3}=\overline{b_{3}}\oplus(\overline{b_{2}}\cdot\overline{b_{1}}\cdot\overline{b_{0}})\label{eq:compl}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
A verificação de 
\emph on
overflow
\emph default
 é feita simplismente verificando se ocorreu uma soma de dois positivos
 que "resultou" em um negativo (bit 3 ativo) ou de dois negativos, em um
 positivo (bit 3 inativo).
 Com isso, foi criado o programa em VHDL para implementar esse módulo, usando
 como entradas oito 
\emph on
toggle switches 
\emph default
para os operandos e um para o tipo de operação (S).
 A saída foi conectada a quatro 
\emph on
LEDs
\emph default
 do resultado e um para o 
\emph on
overflow.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "q2a.vhdl"

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
2-a) Implementação VHDL do somador-subtrator com 
\emph on
carry propagado
\begin_inset CommandInset label
LatexCommand label
name "alg:Implementação-VHDL-q2a"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
b) 
\end_layout

\begin_layout Standard
Para uma melhor visualização do resultado, este será mostrado no display
 de 7 segmentos.
 O componente conversor de binário para o display já criado anteriormente
 é facilmente instanciado no código VHDL.
 No entanto, para visualização de números negativos será necessário enviar
 o valor absoluto deste para o display e indicar o sinal negativo por um
 
\emph on
LED
\emph default
.
 Não foi possível usar o ponto decimal para esse fim, uma vez que ele encontra-s
e desconectado nessa placa.
 O valor absoluto pode ser obtido aplicando novamente as fórmulas (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:compl"

\end_inset

) se o número for negativo.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "q2b.vhdl"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
2-b) Implementação VHDL da interface do display 7-seg para o algoritmo 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Implementação-VHDL-q2a"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
c)
\end_layout

\begin_layout Standard
Outra possível implementação de um somador de vários bits é através da lógica
 de 
\emph on
carry antecipado ("
\emph default
look-ahead
\emph on
")
\emph default
.
 Tal nome deve-se ao fato de os 
\emph on
carrys 
\emph default
serem previamente calculados para todos os somadores de 1-bit.
 Esses cálculos são feitos a partir do bit menos significativo usando expressões
 de geração e propagação de 
\emph on
carry
\emph default
 naquele bit.
 O próximo bit terá 
\emph on
carry
\emph default
 "1" caso o anterior tenha gerado um ou apenas propagado o seu 
\emph on
carry
\emph default
 
\begin_inset Formula $c_{i}$
\end_inset

.
 As fórmulas para operandos 
\begin_inset Formula $x$
\end_inset

 e 
\begin_inset Formula $y$
\end_inset

 são as seguintes:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $z_{i}=p_{i}\oplus c_{i}\qquad c_{i+1}=g_{i}+p_{i}\cdot c_{i}\qquad$
\end_inset

, sendo definidos 
\begin_inset Formula $\qquad p=x_{i}\oplus y_{i}\qquad g_{i}=x_{i}\cdot y_{i}$
\end_inset


\end_layout

\begin_layout Standard
Com essa idéia, foi modificado o código resultante do item 
\series bold
a)
\series default
 no trecho de E/S dos somadores de 1-bit instanciados, sendo o restante
 do programa análogo.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "q2c.vhdl"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
2-c) Implementação VHDL do somador-subtrator de 
\emph on
carry antecipado
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
d)
\end_layout

\begin_layout Standard
A fim de comparar as duas implementações realizadas para somadores, é possível
 avaliar a máxima frequência de operação das mesmas, grandeza que é inversamente
 proporcional aos atrasos do caminho crítico do circuito.
 Para realizar a análise, é necessário tornar 
\emph on
síncronos
\emph default
 ambos os circuitos, isto é, alimentados por um 
\emph on
clock
\emph default
, cujas subidas determinam o instante de entrada e saída de dados dos mesmos.
 Uma maneira simples de fazê-lo é armazenar temporariamente toda a entrada
 e a saída, isto é, dois 
\emph on
buffers,
\emph default
 atualizando-os quando da subida do 
\emph on
clock
\emph default
 - o que é facilmente implementado através de flip-flops.
 Em VHDL, basta copiar esses valores em sinais, sensitivamente à subida
 do 
\emph on
clock.

\emph default
 O código é análogo para ambas implementações de somadores, omitiremos um
 deles.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "q2d_b.vhdl"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
2-d) Estanciação do circuito b com flip-flops de entrada e saída
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para os circuitos somadores com carry progagado e com carry antecipado implement
ados, realizamos uma simulação das mesmas entradas em que  encontramos as
 mesmas saídas, conforme esperado.
 Os valores entrados foram:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $2+3=5$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $6+4=overflow$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $-2+1=-1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $4-(-4)=overflow$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $-2-(1)=-3$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $6-7=-1$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename q2a_waveform.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Simulação 2) a
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename q2c_wav.pdf
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Simulação 2) c
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Questão 3
\end_layout

\begin_layout Paragraph*
a)
\end_layout

\begin_layout Standard
Utilizando o chip 74284 projetou-se um circuito que executasse a multiplicação
 de 2 números de 4 bits e colocasse a saída no display de 7 segmentos .O
 chip 74284 possuía como entrada 4 bits de um número e 4 bits de do outro
 número, contudo retornava somente os 4 bits mais significativos da multiplicaçã
o.
 
\end_layout

\begin_layout Standard
Para o cálculo dos 4 bits menos significativos, a idéia central era analisar
 a relevância de cada multiplicação de bits para os bits da saída.
 Em que temos:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
begin{verbatim}                          
\end_layout

\begin_layout Plain Layout

                            x4y0   x3y0   x2y0  x1y0  x0y0        
\end_layout

\begin_layout Plain Layout

                     x4y1   x3y1   x2y1   x1y1  x0y1    
\end_layout

\begin_layout Plain Layout

              x4y2   x3y2   x2y2   x1y2   x0y2      
\end_layout

\begin_layout Plain Layout

       x4y3   x3y3   x2y3   x1y3   x0y3 
\end_layout

\begin_layout Plain Layout

 x4y4  x3y4   x2y4   x1y4   x0y4
\end_layout

\begin_layout Plain Layout

-------------------------------------------------------------- 
\end_layout

\begin_layout Plain Layout

 z8     z7     z6     z5     z4     z3     z2    z1    z0 
\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como queríamos z3,z2,z1 e z0 deveriamos ter portanto:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

z0 = x0y0
\end_layout

\begin_layout Plain Layout

z1 = x0y1 + x1y0
\end_layout

\begin_layout Plain Layout

z2 = x2y0 + x1y1 + x0y2
\end_layout

\begin_layout Plain Layout

z3 = x3y0 + x2y1 + x1y2 + x0y3 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Utilizando o componente somador,usado como somadores totais (com carry na
 entrada) ou parciais(sem carry na entrada)[ver figura 3.1], para o cálculo
 dos bits menos significativos.
 
\end_layout

\begin_layout Standard
Por exemplo, para o z1: Inicialmente como entrada no somador teremos (x0
 and y1) e (x1 and y0) sendo a saída em cm e z1 (Obs: carry e saída são
 usados em outros somadores, sendo o primeiro para o calculo do próximo
 z -nesse caso z2 - e o segundo para o calculo do próprio z).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename q3a.eps
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Esquemático do circuito lógico de multiplicação
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "q3a.vhdl"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Multiplicador de 4 bits em VHDL 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
b)
\end_layout

\begin_layout Standard
Na segunda parte do projeto desenvolvemos em VHDL(código em algorithm 6)
 um multiplicador utilizando a função pré-definida 
\series bold
 y=a*b
\series default
, sendo 
\series bold
a
\series default
 um inteiro de 4 bits, 
\series bold
b
\series default
 um inteiro de 4 bits e 
\series bold
y
\series default
 um vetor de 8 bits.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "q3b.vhd"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Função pré-defenida y=a*b 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
c)
\end_layout

\begin_layout Standard
Posteriormente fizemos a comparação dos resultados possíveis forncecidos
 pela a função pré-definida e pela implementação inicial em VHDL usando
 o chip 74284,através de um circuito testbench projetado em VHDL (ver código
 em Algorithm 7).Finalmente, simulamos todas as entradas possíveis e se fossem
 iguais acenderia um led(valor igual a 1),caso contrário apagaria.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "q3c.vhd"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparador de resultados
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A simulação obtida está representada no gráfico abaixo, em que percebemos
 uma falha na multiplicação na parte a, em que o chip 74284 nos fornece
 o valor errado para os bits mais significativos na multipicação do número
 dez e número sete, assim nosso sinal de saída torna-se zero.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename waveform_q3c.png
	lyxscale 10
	scale 50
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Simulação da comparação de multiplicação
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Questão 4
\end_layout

\begin_layout Standard
Deseja-se construir um somador/subtrator para números BCD
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
BCD é uma representação usual de um dígito decimal (0 a 9) em 4-bits usando
 os 10 menores números binários; as outras 6 representações possíveis são
 desprezadas.
 
\end_layout

\end_inset

 de 2 dígitos 
\begin_inset Formula $x$
\end_inset

 e 
\begin_inset Formula $y$
\end_inset

, positivos.
 Quatro displays de 7-segmentos serão usados para mostrar a saída em decimal,
 um deles será o sinal.
 A entrada multiplexada nesse caso é relativamente complexa, pois os dígitos
 são selecionados um a um e carregados, portanto trata-se de um circuito
 sequencial.
 Mais especificamente, serão usados 10 
\emph on
toggle switches, 
\emph default
cada um representando um dígito BCD, um 
\emph on
push button 
\emph default
"mode" que alternará a posição a ser carregada (da unidade ou dezena de
 
\begin_inset Formula $x$
\end_inset

 ou 
\begin_inset Formula $y$
\end_inset

), exibindo a seleção atual em 4 leds.
 Outro 
\emph on
pb
\emph default
 "load" fará a carga (armazenamento) quando pressionado; um "opr" alternará
 entre operação de soma (
\begin_inset Formula $'0'$
\end_inset

) e subtração (
\begin_inset Formula $'1'$
\end_inset

), exibindo-se em um led.
 Por fim, um "run" realizará o cálculo programado, exibindo o resultado
 automaticamente no display.
 Pode
\emph on
-
\emph default
se resumir
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
As transições a partir de 
\emph on
calcular
\emph default
 foram omitidas por simplicidade.
\end_layout

\end_inset

 a entrada através do diagrama de estados abaixo.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename q4.png
	width 10cm

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Estados da entrada do somador BCD
\begin_inset CommandInset label
LatexCommand label
name "fig:Estados-da-entrada"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A implementação dessa parte do circuito foi feita através de um conversor
 BCD-Binário ligado nos 
\emph on
switches
\emph default
, cuja saída atua como entrada de 4 registradores.
 Estes armazenam um dígito BCD quando a seleção (implementada com um contador
 de 2 bits, incrementado pela entrada "mode") está sobre um deles e, ao
 mesmo tempo, o botão "load" é pressionado.
 Portanto, os quatro registradores contém os operandos BCD, que devem entrar
 junto com "opr" num módulo responsável pela aritmética desejada quando
 da subida do botão "run".
 Essa parte foi feita usando implementação comportamental VHDL, portanto
 não interessa discutir os detalhes, bastando ver o código fonte.
 Esse módulo tem como saídas (as mesmas do circuito geral) quatro barramentos
 para os displays supracitados.
 Note que não é possível ocorrer "overflow", uma vez que a saída tem 3 dígitos
 BCD, enquanto as entradas, cada uma, apenas 2.
 O código VHDL (dividido em componentes) e o diagrama de blocos encontram-se
 a seguir.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "bcd-dec.vhd"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
4) Componente conversor bcd_dec
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "reg4.vhd"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
4) Componente de armazenamento reg4
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "reg_mux.vhd"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
4) Componente multiplexador/contador reg4_mux 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\size scriptsize
\lang brazilian

\begin_inset CommandInset include
LatexCommand verbatiminput
filename "q4.vhd"

\end_inset


\size default
\lang english

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
4) Código principal, incluindo parte aritmética
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename q4-sch.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
4) Diagrama de blocos para o circuito completo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset


\end_layout

\begin_layout Standard
Posteriormente realizamos a simulação de soma e subtração para os seguintes
 valores representativos:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $11+11=22$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $11+18=29$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $0+18=18$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $55-55=0$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $55-10=45$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $2-10=-8$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $0-10=-10$
\end_inset


\end_layout

\begin_layout Standard
Na simulação temos como entrada valores de load(usado para carregar valor
 no registrador),mode_tg (muda para próximo estado), run (realiza cálculo
 caso valor seja 1),sw (valor BCD a ser carregado no registrador),já para
 alterar as operações,quando run é 1 devemos colocar sw[0] igual a 1 para
 subtração ou 0 para soma.
\end_layout

\begin_layout Standard
Na saída temos os vetores sc, sd, su para valores da centena,dezena e unidade(re
spectivamente) que serão as entradas no display de sete segmentos.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename q4_wave_corrigido.pdf
	scale 50
	BoundingBox 30bp 0bp 595bp 842bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Simulação de subtração e adição de termos BCD 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Conclusão
\end_layout

\begin_layout Standard
Esse laboratório explorou diversos aspectos de circuitos aritméticos: desde
 simples somadores completos, que são a base para vários outros circuitos
 desse tipo, incluindo multiplicadores e subtratores; até somadores BCD
 com armazenamento e método de entrada multiplexado (máquina de estados).
 A implementação eficiente desses módulos é crucial, uma vez que unidades
 aritméticas são largamente usadas e devem ter a frequência máxima de operação
 maior possível.
 
\end_layout

\begin_layout Standard
Foram revistos conceitos como overflow, representação em complemento de
 2 e carry.
 Este último é essencial em somadores de vários bits, e pode ser usado na
 forma de carry propagado ou antecipado, por exemplo.
\end_layout

\begin_layout Standard
Multiplicadores são circuitos mais complexos, mas em VHDL é possível implementá-
los facilmente em modo comportamental, na qual a lógica binária fica implícita.
 Existem também módulos multiplicadores prontos que podem ser usados em
 diagrama de blocos.
 No entanto, notamos erro em uma das saídas, indicando possivelmente uma
 falha de implementação no módulo.
\end_layout

\end_body
\end_document
